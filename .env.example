# Environment Configuration
NODE_ENV=DEV

# Database Configuration (DEV)
DEV_USERNAME=postgres
DEV_DATABASE=blog-manager
DEV_PASSWORD=your_password
DEV_HOST=localhost
DEV_PORT=5432

# Database Configuration (TEST)
TEST_USERNAME=postgres
TEST_DATABASE=blog-manager-test
TEST_PASSWORD=your_password
TEST_HOST=localhost
TEST_PORT=5432

# Cloudinary Configuration
CLOUDINARY_API_SECRET=your_cloudinary_api_secret
CLOUDINARY_API_KEY=your_cloudinary_api_key
CLOUDINARY_API_NAME=your_cloudinary_cloud_name

# Google OAuth Configuration
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret
GOOGLE_CALLBACK_URL=http://localhost:5500/api/v2/auth/google/callback

# Redis Configuration
REDIS_HOST=your_redis_host
REDIS_PORT=your_redis_port
REDIS_PASSWORD=your_redis_password
REDIS_DB=your_redis_database

# Email Configuration (Gmail SMTP)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=465
SMTP_USER=your-email@gmail.com
SMTP_PASS=your_app_password

# RabbitMQ Configuration
RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672

# JWT Configuration
JWT_SECRET=your-super-secret-jwt-key-change-in-production

# Setup Instructions:
# 1. Copy this file to .env: cp .env.example .env
# 2. Replace all placeholder values with your actual credentials
# 3. For Gmail SMTP: Enable 2FA and generate an app password
# 4. For Redis: Use Redis Cloud or set up local Redis instance
# 5. For Cloudinary: Sign up at cloudinary.com for image hosting
# 6. For Google OAuth: Create OAuth app in Google Console
# 7. RabbitMQ runs automatically with Docker Compose
